#!/usr/bin/env node
"use strict";

function get_env() {
  const mode = process.env["DCDY_MODE"];
  if (mode !== "prod" && mode !== "dev" && mode !== "test") {
    throw new Error();
  }

  const image = process.env["DCDY_IMAGE"] || null;

  return { mode, image };
}

function match_mode(env, map) {
  for (let key of Object.keys(map)) {
    if (key.split(",").includes(env.mode)) {
      return map[key];
    }
  }
  throw new Error();
}

const compose = env => ({
  version: "3.4",
  services: compose_services(env)
});

const compose_services = env => ({
  app: compose_services_app(env),
  psql: compose_services_psql(env)
});

const compose_services_app = env => ({
  build: match_mode(env, {
    dev: {
      context: ".",
      dockerfile: "dev.Dockerfile"
    },
    prod: ".",
    test: {
      context: ".",
      target: "builder"
    }
  }),
  restart: "always",
  environment: {
    APP_DIR: match_mode(env, {
      [["prod", "test"]]: "data",
      dev: "data/app"
    }),
    PSQL_HOST: "psql",
    PSQL_PORT: 5432,
    PSQL_DATABASE: "postgres",
    PSQL_USER: "postgres",
    PSQL_PASS: "postgres"
  },
  depends_on: ["psql"],
  volumes: match_mode(env, {
    prod: ["./data/app:/home/app/data", "./config:/home/app/config"],
    dev: ["./:/home/app/"],
    test: ["./config:/home/app/config"]
  })
});

const compose_services_psql = env => ({
  restart: "always",
  image: "postgres:10.5",
  environment: {
    POSTGRES_PASSWORD: "postgres"
  },
  volumes: ["./data/psql:/var/lib/postgresql/data"]
});

console.log(JSON.stringify(compose(get_env())));
